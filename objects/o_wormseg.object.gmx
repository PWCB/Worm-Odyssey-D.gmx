<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_worm</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 2;
osize = 1;
angle = 45;
spring = 0;
freeze = 0;
contact = 0;
dig = 0;
randang = 0;
joint = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = s_worm;
image_xscale = size;
image_yscale = size;
x = parent.x + lengthdir_x(sprite_width/1.2, 180);
y = parent.y + lengthdir_y(sprite_width/1.2, 180);


fixture = physics_fixture_create();
physics_fixture_set_circle_shape(fixture, sprite_width/2);
physics_fixture_set_density(fixture, .5);
physics_fixture_set_friction(fixture, 1 - o_worm.residue);
physics_fixture_set_linear_damping(fixture, .0);
physics_fixture_set_angular_damping(fixture, .0);
physics_fixture_set_restitution(fixture, .3);
//physics_fixture_set_sensor(fixture, .3);
//physics_fixture_set_kinematic(fixture, .3);
physics_fixture_set_awake(fixture, 1);

physics_fixture_bind_ext(fixture, self, 0, 0);

if instance_exists(parent){joint = physics_joint_revolute_create(self, parent, (parent.x+x)/2, (parent.y+y)/2, -angle, angle, 1, 0, 0, 0, 0);}

osize = size;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if num = o_worm.segs-1{
    var spd = 60*o_worm.pulse;
    if keyboard_check(ord('A')){physics_apply_force(x, y, -spd*(o_worm.grounded/o_worm.segs), 0);}
    if keyboard_check(ord('D')){physics_apply_force(x, y, spd*(o_worm.grounded/o_worm.segs), 0);}
    if keyboard_check(ord('W')){physics_apply_force(x, y, 0, -spd*(o_worm.grounded/o_worm.segs));}
    if keyboard_check(ord('S')){physics_apply_force(x, y, 0, spd*(o_worm.grounded/o_worm.segs));}
}*/

if place_meeting(x, y, o_mushdirt){dig = 1;}else{dig = 0;}

if o_worm.go == 1{
    if wormhp &gt; 0{
    if num = round(o_worm.segs/2){
        wormcurl = -line_side(x + lengthdir_x(10, -phy_rotation), y + lengthdir_y(10, -phy_rotation), x + lengthdir_x(-10, -phy_rotation), y + lengthdir_y(-10, -phy_rotation), xavg, yavg);
    }
    
    if keyboard_check(vk_alt){spring++; spring *= 1.5;}
    else{spring /= 2;}
    
    if dig == 0{
        if keyboard_check(ord('F')){if freeze == -1{freeze = radtodeg(physics_joint_get_value(joint, phy_joint_angle));}}
        else{freeze = -1;}
        
        if keyboard_check_pressed(ord('E')){
            randang = random(90)*choose(1, -1);
            if o_worm.grounded == 0{shake += 10;}
        }
    }
    
    if keyboard_check(ord('E')){
        if dig == 0{// &amp;&amp; o_worm.grounded == 0{
            physics_joint_set_value(joint, phy_joint_upper_angle_limit, randang);
            physics_joint_set_value(joint, phy_joint_lower_angle_limit, randang);
        }
    }else{
    
        if keyboard_check(vk_space){
            if dig == 0{
                physics_joint_set_value(joint, phy_joint_upper_angle_limit, 45*wormcurl);
                physics_joint_set_value(joint, phy_joint_lower_angle_limit, 45*wormcurl);
                
                //roll
                var spd = 10*o_worm.horsepower+bst;
                if keyboard_check(ord('A')){physics_apply_force(x, y, lengthdir_x(spd, point_direction(xavg, yavg, x, y)+90), lengthdir_y(spd, point_direction(xavg, yavg, x, y)+90)); o_worm.dir += .1;}
                if keyboard_check(ord('D')){physics_apply_force(x, y, lengthdir_x(spd, point_direction(xavg, yavg, x, y)-90), lengthdir_y(spd, point_direction(xavg, yavg, x, y)-90)); o_worm.dir += .1;}
                if keyboard_check(ord('W')){physics_apply_force(x, y, lengthdir_x(spd*o_worm.grounded, -viewangle+90), lengthdir_y(spd*o_worm.grounded, -viewangle+90)); o_worm.dir += .1;}
                if keyboard_check(ord('S')){physics_apply_force(x, y, lengthdir_x(spd, -viewangle-90), lengthdir_y(spd, -viewangle-90)); o_worm.dir += .1;}
            }
        }else{
            if freeze = -1{
                spring = clamp(spring, 0, 45);
                physics_joint_set_value(joint, phy_joint_upper_angle_limit, angle-spring);
                physics_joint_set_value(joint, phy_joint_lower_angle_limit, -angle+spring);
            }else{
                physics_joint_set_value(joint, phy_joint_upper_angle_limit, freeze);
                physics_joint_set_value(joint, phy_joint_lower_angle_limit, freeze);
            }
        }
    }
    }
    
    size = osize * o_worm.dir * (.66 + (sin(-current_time/200+num/1.5)+1)/3.3) + osize * (1 - abs(o_worm.dir));
    
    if dig == 0{
        var gmag = gravc*phy_mass, gdir = point_direction(x, y, o_map.x, o_map.y);
        if obs == 1{gdir = 270;}
        physics_apply_force(x, y, lengthdir_x(gmag, gdir), lengthdir_y(gmag, gdir));
        
        phy_linear_damping = 0;
        phy_angular_damping = 0;
    }else{
        phy_linear_damping = digdamp;
        phy_angular_damping = digdamp*10;
    }
    
    if place_meeting(x, y, o_boost){
        var boost = instance_nearest(x, y, o_boost);
        physics_apply_force(x, y, lengthdir_x(boost.p, boost.d), lengthdir_y(boost.p, boost.d));
        boost.jig += .5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>contact = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if phy_collision_points &gt; 0{contact = 1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
if o_worm.go == 1{
draw_set_color(wormcol);
var r = sprite_width/2*size, pr = parent.sprite_width/2*parent.size, dir = -phy_rotation, pdir = -parent.phy_rotation, p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y;
p1x = x + lengthdir_x(r, dir+90);
p1y = y + lengthdir_y(r, dir+90);
p2x = x + lengthdir_x(r, dir-90);
p2y = y + lengthdir_y(r, dir-90);
p3x = parent.x + lengthdir_x(pr, pdir+90);
p3y = parent.y + lengthdir_y(pr, pdir+90);
p4x = parent.x + lengthdir_x(pr, pdir-90);
p4y = parent.y + lengthdir_y(pr, pdir-90);




//trail
var wx = 0, wy = 0;
if o_stuff.sclear == 1{wx -= o_stuff.sw/4;}//left
if o_stuff.sclear == 3{wy -= o_stuff.sh/4;}//up
if o_stuff.sclear == 2{wx += o_stuff.sw/4;}//right
if o_stuff.sclear == 4{wy += o_stuff.sh/4;}//down
//if wx != 0{draw_clear(c_red);}
//if wy != 0{draw_clear(c_blue);}
if keyboard_check(ord('E')) &amp;&amp; o_worm.trick = 1
{
    if !surface_exists(o_stuff.surf){o_stuff.surf = surface_create(o_stuff.sw, o_stuff.sh);}
    surface_set_target(o_stuff.surf);
    
    
    draw_set_color(make_color_rgb(255 - 155*(sin(current_time/100)+1)/2, 255 - 155*(sin(350 + current_time/100)+1)/2, 255 - 155*(sin(650 + current_time/100)+1)/2));
    draw_triangle(p1x - o_stuff.sx + wx, p1y - o_stuff.sy + wy, p3x - o_stuff.sx + wx, p3y - o_stuff.sy + wy, p2x - o_stuff.sx + wx, p2y - o_stuff.sy + wy, 0);
    draw_triangle(p2x - o_stuff.sx + wx, p2y - o_stuff.sy + wy, p3x - o_stuff.sx + wx, p3y - o_stuff.sy + wy, p4x - o_stuff.sx + wx, p4y - o_stuff.sy + wy, 0);
    
    surface_reset_target();
}else{
    if bst &gt; 10
    {
        if !surface_exists(o_stuff.surf){o_stuff.surf = surface_create(o_stuff.sw, o_stuff.sh);}
        surface_set_target(o_stuff.surf);
        
        draw_set_alpha(bst/500);
        draw_set_color(make_color_rgb(255 - 155*(sin(current_time/100)+1)/2, 255 - 155*(sin(100 + current_time/100)+1)/2, 255 - 155*(sin(200 + current_time/100)+1)/2));
        draw_triangle(p1x - o_stuff.sx + wx, p1y - o_stuff.sy + wy, p3x - o_stuff.sx + wx, p3y - o_stuff.sy + wy, p2x - o_stuff.sx + wx, p2y - o_stuff.sy + wy, 0);
        draw_triangle(p2x - o_stuff.sx + wx, p2y - o_stuff.sy + wy, p3x - o_stuff.sx + wx, p3y - o_stuff.sy + wy, p4x - o_stuff.sx + wx, p4y - o_stuff.sy + wy, 0);
        draw_set_alpha(1);
        
        surface_reset_target();
    }
}
draw_set_color(wormcol);




if !surface_exists(o_stuff.surf){o_stuff.surf = surface_create(o_stuff.sw, o_stuff.sh);}
surface_set_target(o_stuff.surf);
surface_reset_target();
//normal
draw_triangle(p1x, p1y, p3x, p3y, p2x, p2y, 0);
draw_triangle(p2x, p2y, p3x, p3y, p4x, p4y, 0);

//shine
var shimdir = point_direction(p1x, p1y, p3x, p3y);

draw_set_blend_mode(bm_add);
draw_set_color(c_white);

draw_set_alpha(sin(shimdir/((360/2)/pi)));
draw_triangle(x + lengthdir_x(r/4, dir+90), y + lengthdir_y(r/4, dir+90), parent.x + lengthdir_x(pr/4, pdir+90), parent.y + lengthdir_y(pr/4, pdir+90), parent.x + lengthdir_x(pr/1.5, pdir+90), parent.y + lengthdir_y(pr/1.5, pdir+90), 0);
draw_triangle(x + lengthdir_x(r/4, dir+90), y + lengthdir_y(r/4, dir+90), x + lengthdir_x(r/1.5, dir+90), y + lengthdir_y(r/1.5, dir+90), parent.x + lengthdir_x(pr/4, pdir+90), parent.y + lengthdir_y(pr/4, pdir+90), 0);


draw_set_color(make_color_rgb(150, 125, 66));
draw_set_alpha(cos(shimdir/((360/2)/pi))/2);
draw_triangle(x + lengthdir_x(-r/4, dir+90), y + lengthdir_y(-r/4, dir+90), parent.x + lengthdir_x(-pr/4, pdir+90), parent.y + lengthdir_y(-pr/4, pdir+90), parent.x + lengthdir_x(-pr/1.5, pdir+90), parent.y + lengthdir_y(-pr/1.5, pdir+90), 0);
draw_triangle(x + lengthdir_x(-r/4, dir+90), y + lengthdir_y(-r/4, dir+90), x + lengthdir_x(-r/1.5, dir+90), y + lengthdir_y(-r/1.5, dir+90), parent.x + lengthdir_x(-pr/4, pdir+90), parent.y + lengthdir_y(-pr/4, pdir+90), 0);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);







//draw_set_color(make_color_rgb(200, 150, 175));
//draw_line(p1x, p1y, p2x, p2y);
//if num != 4{
draw_set_color(make_color_rgb(150, 80, 100));
draw_line(p1x, p1y, p3x, p3y);
draw_line(p2x, p2y, p4x, p4y);
draw_set_color(c_white);
//}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
