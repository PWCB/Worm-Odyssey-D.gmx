<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_worm</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///time trial obastacle course first part of level can be tackled in multiple ways with certain characters, then there's the race to the finish
globalvar wormhp, wormcol, wormspeed, wormdir, wormcurl, xavg, yavg, digdamp, bst;
trick = 0;
tricki = 0;
trickscore = 0;
trickcomb = 0;

//tricks
tricklist[0, 0] = "Dung Hop";
tricklist[0, 1] = 100;
tricklist[1, 0] = "Screte Flip";
tricklist[1, 1] = 50;
tricklist[2, 0] = "Blimbus";
tricklist[2, 1] = 200;
tricklist[3, 0] = "Fupa Tuck";
tricklist[3, 1] = 150;
tricklist[4, 0] = "Chapstick Grap";
tricklist[4, 1] = 250;
tricklist[5, 0] = "Feek Drop";
tricklist[5, 1] = 50;
tricklist[6, 0] = "Triple Clot";
tricklist[6, 1] = 500;
tricklist[7, 0] = "Slunted Bingus";
tricklist[7, 1] = 120;
tricklist[8, 0] = "Sbubby";
tricklist[8, 1] = 600;

complete = 0;
starttime = 0;
alarm[2] = room_speed;
chode = 0;
go = 0;
grounded = 0;
pulse = 0;
dir = 0;
wormspeed = 0;
wormdir = 0;
wormcurl = 0;
wormhp = 100;
dig = 1;
digdamp = 8;
tog = 0;
xavg = x;
yavg = y;
xavgp = x;
yavgp = y;
alarm[0] = 3;
contact = 0;
sweat = 1;


bst = 0;
bstmtr = 100;
bstmax = 10;

if instance_exists(o_charselectcontrol){
    type = o_charselectcontrol.select;
    with(o_charselectcontrol){instance_destroy();}
    o_stuff.type = type;
}else{
    type = o_stuff.type;
}
horsepower = 1;
intelligence = 1;
residue = 0;
girth = 1;
longness = 1.6;
wormcol = make_color_rgb(255, 180, 180);

switch(type){
    case 0://Mark I
        type = 0;
        horsepower = 1.5;
        intelligence = .6;
        residue = 0;
        girth = 1;
        longness = 1.6;
        wormcol = make_color_rgb(255, 180, 180);
        break;
    case 1://Arthur
        horsepower = 1.4;
        intelligence = 1.2;
        residue = .3;
        girth = 1;
        longness = 2.4;
        wormcol = make_color_rgb(180, 210, 255);
        break;
    case 2://The Bruise
        horsepower = 4;
        intelligence = .2;
        residue = 0;
        girth = 1.6;
        longness = 1.3;
        wormcol = make_color_rgb(255, 120, 120);
        break;
    case 3://Tony Suzuki
        horsepower = .5;
        intelligence = .9;
        residue = 1;
        girth = .8;
        longness = .8;
        wormcol = make_color_rgb(180, 255, 180);
        break;
}

segs = longness*10;//24;
size = sin(1*(pi/segs))*girth;

sprite_index = s_worm;
image_xscale = size;
image_yscale = size;

fixture = physics_fixture_create();
physics_fixture_set_circle_shape(fixture, sprite_width/2);
physics_fixture_set_density(fixture, .5);
physics_fixture_set_friction(fixture, 1-residue);
physics_fixture_set_linear_damping(fixture, .0);
physics_fixture_set_angular_damping(fixture, .0);
physics_fixture_set_restitution(fixture, .3);
//physics_fixture_set_sensor(fixture, .3);
//physics_fixture_set_kinematic(fixture, .3);
physics_fixture_set_awake(fixture, 1);

physics_fixture_bind_ext(fixture, self, 0, 0);

seg[0] = self;
for(i = 1; i &lt; segs; i++){
    seg[i] = instance_create(x - 10*i, y, o_wormseg);
    seg[i].parent = seg[i-1];
    seg[i].size = clamp(sin((i+1)*(pi/segs)), .1, .55)*girth;
    seg[i].num = i;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>trick -= .5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>starttime = current_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sweat = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>go = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if go == 1{

//sweet tricks
if grounded == 0{
    if keyboard_check_pressed(ord('E')){
        if trick == 0{
            //initiate the trick
            trick = 1;
            trickcomb = 1;
            tricki = round(random(8));
            trickscore += tricklist[tricki, 1];
            //if !audio_is_playing(a_trick0){
                audio_play_sound(a_trick0, .4, 0);
            //}
        }else{
            trickcomb++;
            tricki = round(random(8));
            trickscore += tricklist[tricki, 1];
            //if !audio_is_playing(a_trick0){
                audio_play_sound(a_trick0, .4, 0);
            //}
        }
    }
    
    if keyboard_check(ord('E')){
        if trick == 1{
            trickscore += round(tricklist[tricki, 1]/30);
        }
    }
}

if trick == 1{
    if grounded != 0{
        if keyboard_check(vk_space){
            //you landed it
            trick = 2.5;
            alarm[3] = room_speed*2;
            if !audio_is_playing(a_trick1){
                audio_play_sound(a_trick1, .4, 0);
            }
        }else{
            //fall
            wormhp -= 25;
            shake += 30;
            trick = 3.5;
            alarm[3] = room_speed*2;
            if !audio_is_playing(a_squish0){
                audio_play_sound(a_squish0, .4, 0);
                audio_play_sound(a_scream, .4, 0);
            }
        }
    }
}

if trick == 3.5{
    trickscore -= round(trickscore/room_speed*2);
    trickscore = clamp(trickscore, 0, 999999);
}

//if we landed gimme the points
if trick == 2{
    points += trickscore;
    trickcomb = 0;
    tricki = 0;
    trickscore = 0;
    trick = 0;
}

//if we didn't land it lose the points and get hurt
if trick == 3{
    trickcomb = 0;
    tricki = 0;
    trickscore = 0;
    trick = 0;
}

if complete == 1{bstmax++;}

pulse = (sin(current_time/100)+1)/2;
dir /= 1.05;

xavg = x;
yavg = y;
wormspeed = phy_speed;
var groundedp = grounded;
grounded = 0;
for(i = 0; i &lt; segs; i++){
    with(seg[i]){
    xavg += x;
    yavg += y;
    wormspeed += phy_speed;
        if contact == 1 || dig == 1{
            other.grounded++;
        }
    }
}

if place_meeting(x, y, o_mushdirt){
    dig = 1;
    if !audio_is_playing(a_dig0) &amp;&amp; dir &gt; .3{
        audio_play_sound(a_dig0, .4, 0);
    }
}else{dig = 0;}

wormspeed /= segs;
xavg /= segs+1;
yavg /= segs+1;

wormdir = point_direction(xavgp, yavgp, xavg, yavg);

//if keyboard_check(vk_shift) &amp;&amp; !keyboard_check(ord('E')){shake += wormspeed/18;}
//if !keyboard_check(vk_shift) &amp;&amp; !keyboard_check(ord('E')) &amp;&amp; groundedp + 1 &lt; grounded{shake += 2*grounded*wormspeed/18; wormhp -= grounded*wormspeed/18;}
wormhp *= 1.001;
wormhp = clamp(wormhp, 0, 100);

if keyboard_check(vk_shift) &amp;&amp; bst &lt; bstmax &amp;&amp; bstmtr &gt; bstmax/500{
    bst++;
    bst*=1.1;
    bstmtr -= 1+bstmax/500;
    bstmax -= 0.4;
    if bstmtr &lt; 50{
        if sweat == 1{
            instance_create(x, y, o_sweat);
            sweat = 0;
            alarm[1] = 8;
        }
    }
}else{
    bst /= 2;
    bstmtr += 1+bstmax/500;
}
bst = clamp(bst, 0, bstmax);
bstmtr = clamp(bstmtr, 0, 100);
bstmax = clamp(bstmax, 0, 500);

var spd = 720*pulse*horsepower;
if wormhp &gt; 0{
    if keyboard_check(ord('A')){physics_apply_force(x, y, lengthdir_x(-spd*(grounded/segs)-bst, -viewangle), lengthdir_y(-spd*(grounded/segs)-bst, -viewangle)); dir += .1;}
    if keyboard_check(ord('D')){physics_apply_force(x, y, lengthdir_x(-spd*(grounded/segs)-bst, -viewangle+180), lengthdir_y(-spd*(grounded/segs)-bst, -viewangle+180)); dir += .1;}
    if keyboard_check(ord('W')){physics_apply_force(x, y, lengthdir_x(-spd*(grounded/segs)-bst, -viewangle-90), lengthdir_y(-spd*(grounded/segs)-bst, -viewangle-90)); if dig == 1{dir += .1;}}
    if keyboard_check(ord('S')){physics_apply_force(x, y, lengthdir_x(-spd*(grounded/segs)-bst, -viewangle+90), lengthdir_y(-spd*(grounded/segs)-bst, -viewangle+90)); if dig == 1{dir += .1;}}
}

//squish
if dir &gt; .5 &amp;&amp; pulse &gt; .5{
    var rnum = random(10);
    if rnum &gt; 9{
        if !audio_is_playing(a_squish3){
            audio_play_sound(a_squish3, .5, 0);
        }
    }
}

dir = clamp(dir, 0, 1);

if dig == 0{
    var gmag = gravc*phy_mass, gdir = point_direction(x, y, o_map.x, o_map.y);
    if obs == 1{gdir = 270;}
    physics_apply_force(x, y, lengthdir_x(gmag, gdir), lengthdir_y(gmag, gdir));
    
    phy_linear_damping = 0;
    phy_angular_damping = 0;
}else{
    phy_linear_damping = digdamp;
    phy_angular_damping = digdamp;
}

if place_meeting(x, y, o_boost){
    var boost = instance_nearest(x, y, o_boost);
    physics_apply_force(x, y, lengthdir_x(boost.p, boost.d), lengthdir_y(boost.p, boost.d));
}

if place_meeting(x, y, o_apple){
    complete = 1;    
}

var mush = instance_nearest(x, y, o_mush);
if point_distance(x, y, mush.x, mush.y) &lt; 64{
    mush.jig += sin(current_time/100)/2*wormspeed/18;
}
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>contact = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if phy_collision_points &gt; 0{contact = 1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
/*draw_circle(xavg, yavg, 10, 1);
draw_set_color(c_aqua);
draw_circle(xavg, yavg, 10, 0);
/*draw_set_color(c_white);
draw_line(xavg, yavg, xavg + lengthdir_x(60, viewangle), yavg + lengthdir_y(60, wormdir));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(r_map);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
