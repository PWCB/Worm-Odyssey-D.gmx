<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar viewangle, gravc, shake, obs, fonty, fontz, scr, hiscr, points, mins, secs, complete;
fonty = font_add(".\yoster.ttf", 18, 0, 0, 32, 128);
fontz = font_add(".\yoster.ttf", 32, 0, 0, 32, 128);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

complete = 0;
scr = 0;
hiscr = 0;
points = 0;
mins = 0;
secs = 0;
dispscore = 0;

obs = 1;
gravc = 30;
viewangle = 0;
shake = 0;
xshake = 0;
yshake = 0;
type = 0;
view_wview = 512;
view_hview = 448;
view_wport = 512;
view_hport = 448;
dispscor = 0;

window_set_size(512, 448);
alarm[0] = 3;

sr = 4;
sw = view_wview*sr;
sh = view_hview*sr;
sx = view_xview - sw/sr - 10;
sy = view_yview - sh/sr - 10;
sclear = 0;
surf = surface_create(sw, sh);
surfb = surface_create(sw, sh);
outlinesurf = surface_create(sw, sh);
copy = surface_create(sw, sh);
tumsurf = surface_create(64, 64);

avgal = 8;
for(i = 0; i &lt; avgal; i++){
    xavga[i] = -4064;
    yavga[i] = 0;
}
xavgavg = -4064;
yavgavg = 0;
cx = -4064;
cy = -2000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>o_transition.go = 1;
o_transition.r = r_gameover;
//audio_play_sound(a_start, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>o_transition.go = 1;
o_transition.r = r_charselect;
//audio_play_sound(a_start, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
window_center();
texture_set_interpolation(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//time
if instance_exists(o_worm) &amp;&amp; complete = 0{
    if o_worm.go == 1{
        secs++;
        if secs/room_speed &gt; 59{secs = 0; mins++;}
    }else{
        secs = 0;
        mins = 0;
    }
    
    if wormhp &lt;= 0{
        alarm[2] = room_speed;
        wormhp = .1;
    }
}

//score
if complete == 1{
    if scr = 0{
        //base time score (6000) should vary on how long it actually takes to complete the level
        scr = points + 6000 - (mins*60 + secs);
    }
    
    if dispscore = scr{
        alarm[1] = room_speed*3;
        if hiscr &lt; scr{hiscr = scr;}
        dispscore = scr+.1;
        audio_play_sound(a_trick1, 1, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera
if instance_exists(o_worm){
if o_worm.go == 1{
for(i = avgal; i &gt; 0; i--){
    xavga[i] = xavga[i-1];
    yavga[i] = yavga[i-1];
}
xavga[0] = xavg;
yavga[0] = yavg;

xavgavg = 0;
yavgavg = 0;

for(i = 0; i &lt; avgal; i++){
    xavgavg += xavga[i];
    yavgavg += yavga[i];
}
xavgavg /= avgal;
yavgavg /= avgal;

//wormspeed = point_distance(xavgavg, yavgavg, xavg, yavg);

var cx2 = xavg - 3*(xavgavg - xavg), cy2 = yavg - 3*(yavgavg - yavg); 
if cx &lt; cx2{cx += (cx2 - cx)/8;}
if cy &lt; cy2{cy += (cy2 - cy)/8;}
if cx &gt; cx2{cx -= (cx - cx2)/8;}
if cy &gt; cy2{cy -= (cy - cy2)/8;}
//cx = o_worm.x;
//cy = o_worm.y;

viewangle = -point_direction(xavg, yavg, o_map.x, o_map.y)-90;
if obs == 1{viewangle = 0;}
//if keyboard_check(ord('O')){viewangle++}
//if keyboard_check(ord('L')){viewangle--}
xshake += random(shake)*choose(1, -1);
yshake += random(shake)*choose(1, -1);
view_angle[0] = viewangle;
view_xview[0] = cx - view_wview[0]*.5 + lengthdir_x(-25, -viewangle-90) + xshake;
view_yview[0] = cy - view_wview[0]*.5 + lengthdir_y(-25, -viewangle-90) + yshake;


if shake &gt; 0{shake /= 1.5;}
if xshake != 0{xshake /= 1.5;}
if yshake != 0{yshake /= 1.5;}
}
//if keyboard_check_pressed(vk_space){shake += 10;}
//if keyboard_check_pressed(vk_shift){shake += 10;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///trail
if instance_exists(o_worm){
if view_xview &lt; sx + sw/4{sx -= sw/4; sclear = 1;}//left
if view_yview &lt; sy + sh/4{sy -= sh/4; sclear = 3;}//up
if view_xview + view_wview &gt; sx + sw/4*3{sx += sw/4; sclear = 2;}//right
if view_yview + view_hview &gt; sy + sh/4*3{sy += sh/4; sclear = 4;}//down
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fall damage
if secs &gt; 100 || mins &gt; 1{
if instance_exists(o_worm){
    if o_worm.go == 1{
        if point_distance(xavga[1], yavga[1], xavga[2], yavga[2]) &gt; point_distance(xavga[0], yavga[0], xavga[1], yavga[1])*1.4{
            
            
                var seg, go = 1;
                for (i = 0; i &lt; o_worm.segs-1; i++){
                    seg = instance_find(o_wormseg, i);
                    if instance_exists(seg){
                        if seg.dig == 1{
                            go = 0;
                            break;
                        }
                    }else{
                        go = 0;
                        //show_message("dun exist");
                        break;
                    }
                }
                if go == 1{
                    
                    var hit = point_distance(xavg, yavg, xavga[2], yavga[2])*o_worm.grounded/o_worm.segs;
                    
                    if !keyboard_check(vk_space){
                        wormhp -= hit*2;
                    }
                    
                    shake += (hit*3);
                    repeat (hit){
                        seg = instance_find(o_wormseg, round(random(o_worm.segs)));
                        if instance_exists(seg){
                            instance_create(seg.x, seg.y, o_puff);
                        }
                    }
                    
                    if hit &gt; 2{
                        if !audio_is_playing(a_scream){
                            audio_play_sound(a_scream, 0.5, 0);
                        }
                        if !audio_is_playing(a_squish0){
                            audio_play_sound(a_squish0, 0.8, 0);
                        }
                    }else{
                        if hit &gt; 1{
                            if !audio_is_playing(a_squish0){
                                audio_play_sound(a_squish0, 0.8, 0);
                            }
                        }else{
                            if hit &gt; .2{
                                if !audio_is_playing(a_squish2){
                                    audio_play_sound(a_squish2, 0.4, 0);
                                }
                            }
                            
                            if hit &gt; .1{
                                if !audio_is_playing(a_squish4){
                                    audio_play_sound(a_squish4, 0.4, 0);
                                }
                            }
                        }
                    }
                }
                
                
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///outline surface

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(o_worm){
    for(i = 0; i &lt; avgal; i++){
        xavga[i] = xavg;
        yavga[i] = yavg;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///trail
if instance_exists(o_worm){
if !surface_exists(surf){surf = surface_create(sw, sh);}
if !surface_exists(surfb){surfb = surface_create(sw, sh);}

draw_set_color(0);
var sxx = 0, syy = 0;
switch(sclear){
    case 1://left
        sxx = sw/4;
        syy = 0;
//        sclear = 11;
        break;
    case 2://right
        sxx = -sw/4;
        syy = 0;
//        sclear = 22;
        break;
    case 3://up
        sxx = 0;
        syy = sh/4;
//        sclear = 33;
        break;
    case 4://down
        sxx = 0;
        syy = -sh/4;
//        sclear = 44;
        break;
}
        //copy surface to surfb
        surface_copy(surfb, 0, 0, surf);
        //clear surf
        surface_set_target(surf);
        draw_rectangle(0, 0, sw, sh, 0);
        //draw the copy adjusted
        draw_surface(surfb, sxx, syy);
//            draw_surface(surf, -4, -4);
//            draw_surface(surf, -4, 4);
//            draw_surface(surf, 4, -4);
//            draw_surface(surf, 4, 4);
        surface_reset_target();
        //clear copy surface
        surface_set_target(surfb);
        draw_rectangle(0, 0, sw, sh, 0);
        surface_reset_target();
        sclear = 0;

surface_set_target(surf);

if sclear == 0{draw_set_alpha(0.01);}
draw_rectangle(0, 0, sw, sh, 0);
draw_set_color(c_white);
draw_set_alpha(1);

surface_reset_target();

draw_set_blend_mode(bm_add);
draw_surface(surf, sx, sy);
//draw_rectangle(sx + sw/4, sy + sw/4, sw - sw/4, sh - sw/4, 1);
draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///outline
if !(surface_exists(outlinesurf)){outlinesurf = surface_create(sw, sh);}
if !(surface_exists(copy)){copy = surface_create(sw, sh);}


    //outline
    surface_copy(copy, 0, 0, outlinesurf);
    
    surface_set_target(outlinesurf);
    draw_clear_alpha(c_black, 1);
    shader_set(sh_white);
    draw_surface_ext(copy, 0, 0, 1, 1, 0, c_white, 1);
    shader_reset();
    surface_reset_target();

    draw_set_blend_mode(bm_add);
    shader_set(sh_outline);
    draw_surface_ext(outlinesurf, sx, sy, 1, 1, 0, c_white, 1-o_transition.fade);
    shader_reset();
    draw_set_blend_mode(bm_normal);

    
    surface_set_target(outlinesurf);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//spedometer
draw_set_font(fonty);
if instance_exists(o_worm){
d3d_set_projection_ortho(0, 0, view_wview, view_hview, 0);
var xx = 32, yy = view_hview-32, dir = 135, r = 32;
draw_set_color(c_black);
draw_circle(xx, yy, r, 0);
draw_triangle(0, view_hview - r*2, r, view_hview - r*2, 0, view_hview, 0);
draw_triangle(0, view_hview, r, view_hview - r*2, r, view_hview, 0);

draw_set_color(make_color_rgb(200, 210, 255));
draw_triangle(xx, yy, xx + lengthdir_x(r-3, dir), yy + lengthdir_y(r-3, dir), xx + lengthdir_x(r-3, dir - 30), yy + lengthdir_y(r-3, dir - 30), 0);
draw_set_color(make_color_rgb(230, 230, 210));
draw_triangle(xx, yy, xx + lengthdir_x(r-3, dir - 30), yy + lengthdir_y(r-3, dir - 30), xx + lengthdir_x(r-3, dir - 60), yy + lengthdir_y(r-3, dir - 60), 0);
draw_set_color(make_color_rgb(250, 210, 180));
draw_triangle(xx, yy, xx + lengthdir_x(r-3, dir - 60), yy + lengthdir_y(r-3, dir - 60), xx + lengthdir_x(r-3, dir - 90), yy + lengthdir_y(r-3, dir - 90), 0);
draw_set_color(make_color_rgb(250, 180, 180));
draw_triangle(xx, yy, xx + lengthdir_x(r-3, dir - 90), yy + lengthdir_y(r-3, dir - 90), xx + lengthdir_x(r-3, dir - 120), yy + lengthdir_y(r-3, dir - 120), 0);
draw_set_color(make_color_rgb(250, 120, 120));
draw_triangle(xx, yy, xx + lengthdir_x(r-3, dir - 120), yy + lengthdir_y(r-3, dir - 120), xx + lengthdir_x(r-3, dir - 150), yy + lengthdir_y(r-3, dir - 150), 0);
draw_set_color(make_color_rgb(250, 80, 100));
draw_triangle(xx, yy, xx + lengthdir_x(r-3, dir - 150), yy + lengthdir_y(r-3, dir - 150), xx + lengthdir_x(r-3, dir - 180), yy + lengthdir_y(r-3, dir - 180), 0);

draw_set_color(c_black);
draw_line_width(xx, yy, xx + lengthdir_x(r-5, dir - wormspeed*10), yy + lengthdir_y(r-5, dir - wormspeed*10), 4);
draw_set_color(c_white);

//tum
var tums = 1.2, tumx = 416, tumy = 352;
draw_sprite_ext(s_tummy, -1, tumx, tumy, tums, tums, 0, c_white, 1);

if !surface_exists(tumsurf){tumsurf = surface_create(64, 64);}
surface_set_target(tumsurf);
draw_sprite(s_tummycontents, -1, 0, 0);
draw_rectangle_colour(0, 0, 64, 64 - 64*(o_worm.bstmax/500), 0, 0, 0, 0, 0);
surface_reset_target();
d3d_set_projection_ortho(0, 0, view_wview, view_hview, 0);
draw_set_blend_mode(bm_add);
draw_surface_ext(tumsurf, tumx, tumy, tums, tums, 0, c_white, 1);
draw_set_blend_mode(bm_normal);


var fcol = c_white;
//score &amp; time
if complete == 1{
    
    if dispscore &lt; scr{
        dispscore += scr/(3*room_speed);
        audio_play_sound(a_blip, 1, 0);
    }else{
        shader_set(sh_wobble);
    }
    
    draw_set_font(fontz);
    draw_text_pop(512/2, 448/2, string(round(dispscore)), c_white);
    draw_set_font(fonty);
    shader_reset();

    if round(current_time/300)/2 == round(round(current_time/300)/2){
        draw_set_alpha(0);
    }else{
        fcol = make_color_rgb(255 - 155*(sin(current_time/100)+1)/2, 255 - 155*(sin(350 + current_time/100)+1)/2, 255 - 155*(sin(650 + current_time/100)+1)/2);
    }
}


if o_worm.starttime != 0{
    var tstr, m = mins, s = round(secs/room_speed);
    if m &lt; 10{m = "0" + string(mins);}
    if s &lt; 10{s = "0" + string(round(secs/room_speed));}
    tstr = string(m) + ":" + string(s);
    draw_text_pop(512 - string_width(tstr)/2-32, 32, tstr, fcol);
}

draw_text_pop(512 - string_width(string(points))/2-32, 64, string(points), fcol);
draw_set_alpha(1);
draw_set_color(c_white);

if o_worm.trick != 0{
    fcol = c_white;
    draw_set_font(font0);
    if o_worm.trick == 2.5{fcol = make_color_rgb(135, 255, 137);}
    if o_worm.trick == 3.5{fcol = make_color_rgb(255, 106, 61);}
    draw_text_pop(512/2, 448 - 32, o_worm.tricklist[o_worm.tricki, 0] + " - " + string(o_worm.trickscore), fcol);
    draw_set_font(fonty);
}

//bars
//hp
var col1 = make_color_rgb(255, 200, 200), col2 = make_color_rgb(255, 10, 0);
draw_circle_colour(100*wormhp/100, 20, 9, merge_color(col1, col2, .5), merge_color(col1, col2, .5), 0);
draw_rectangle_colour(0, 10, 100*wormhp/100, 30, col1, col1, col2, col2, 0);
draw_sprite(s_hpbar, -1, 0, 20);
//boost 
var col1 = make_color_rgb(120, 200, 255), col2 = make_color_rgb(0,30, 255);
draw_circle_colour(100*o_worm.bstmtr/100, 60, 9, merge_color(col1, col2, .5), merge_color(col1, col2, .5), 0);
draw_rectangle_colour(0, 50, 100*o_worm.bstmtr/100, 70, col1, col1, col2, col2, 0);
draw_sprite(s_hpbar, -1, 0, 60);
draw_set_color(c_white);

}
//debug
//if instance_exists(o_worm){draw_text_pop(200, 30, string(mins), c_red);}
/*
if o_worm.go == 1{
draw_text(200, 200, string(bst) + " // " + string(o_worm.bstmtr));
}
//draw_text(10, 10, string(wormspeed) + "//" + string(o_worm.y) + "//" + string(fps_real));
/*if o_worm.go == 1{
draw_set_color(c_red);
var s = o_worm.seg[round(o_worm.segs/2)];
draw_text(10, 20, string(line_side(s.x + lengthdir_x(10, -s.phy_rotation), s.y + lengthdir_y(10, -s.phy_rotation), s.x + lengthdir_x(-10, -s.phy_rotation), s.y + lengthdir_y(-10, -s.phy_rotation), xavg, yavg)));
draw_line(s.x, s.y, s.x + lengthdir_x(10, -s.phy_rotation), s.y + lengthdir_y(10, -s.phy_rotation));
draw_set_color(c_white);
}
//draw_line(view_wview, 0, 0, view_hview);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="121">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>complete = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="120">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wormhp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="116">
      <action>
        <libid>1</libid>
        <id>531</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_fullscreen</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
