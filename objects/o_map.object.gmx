<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>o_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == r_editor{edit = 1;}
else{edit = 0;}
ei = 0;
br = 1;
if edit == 0{scale = 20;}
else{scale = 1;}
slices = 200;
rad = 200;
x = room_width/2;
if edit == 0{y = rad*2.38*scale + 350;}
else{y = room_height/2;}
for(i = 0; i &lt; slices; i++){
    len[i] = rad;
    if i &lt; 12{
        bmush[i] = -1;
    }
}
bmc = 0;
ding = 0;

//col[0] = make_color_rgb(255, 209, 112);
//col[0] = make_color_rgb(255, 209, 112);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///map array
len[0] = 62.69;
len[1] = 63.41;
len[2] = 63.34;
len[3] = 63.27;
len[4] = 63.24;
len[5] = 63.27;
len[6] = 128.31;
len[7] = 164.63;
len[8] = 162.93;
len[9] = 161.21;
len[10] = 159.21;
len[11] = 157.20;
len[12] = 155.17;
len[13] = 153.12;
len[14] = 151.07;
len[15] = 149;
len[16] = 146.91;
len[17] = 144.80;
len[18] = 141.60;
len[19] = 236.58;
len[20] = 236.35;
len[21] = 236.10;
len[22] = 235.84;
len[23] = 235.56;
len[24] = 235.27;
len[25] = 234.98;
len[26] = 234.66;
len[27] = 234.32;
len[28] = 140.87;
len[29] = 138.30;
len[30] = 136.81;
len[31] = 136.54;
len[32] = 137.46;
len[33] = 139.48;
len[34] = 142.48;
len[35] = 146.05;
len[36] = 152.08;
len[37] = 159.47;
len[38] = 168.95;
len[39] = 183.51;
len[40] = 200.71;
len[41] = 281.29;
len[42] = 335.99;
len[43] = 366.43;
len[44] = 439.83;
len[45] = 435.41;
len[46] = 430.99;
len[47] = 400.12;
len[48] = 369.25;
len[49] = 369.85;
len[50] = 370.39;
len[51] = 370.84;
len[52] = 371.48;
len[53] = 372.79;
len[54] = 362.47;
len[55] = 357.97;
len[56] = 357.71;
len[57] = 360.08;
len[58] = 362.86;
len[59] = 365.65;
len[60] = 364.38;
len[61] = 363.12;
len[62] = 364.09;
len[63] = 365.06;
len[64] = 361.64;
len[65] = 358.21;
len[66] = 356.64;
len[67] = 348.81;
len[68] = 341.37;
len[69] = 339.23;
len[70] = 341.87;
len[71] = 335.27;
len[72] = 336.21;
len[73] = 328.91;
len[74] = 326.66;
len[75] = 326.83;
len[76] = 327.12;
len[77] = 327.72;
len[78] = 327.77;
len[79] = 327.80;
len[80] = 327.81;
len[81] = 327.80;
len[82] = 312.04;
len[83] = 301.48;
len[84] = 295.78;
len[85] = 294.74;
len[86] = 294.06;
len[87] = 286.23;
len[88] = 286.53;
len[89] = 287.52;
len[90] = 289.80;
len[91] = 297.83;
len[92] = 297.35;
len[93] = 296.91;
len[94] = 269.97;
len[95] = 257.50;
len[96] = 253.49;
len[97] = 253.83;
len[98] = 260.54;
len[99] = 254.27;
len[100] = 252.96;
len[101] = 253.67;
len[102] = 254.52;
len[103] = 255.12;
len[104] = 255.05;
len[105] = 254.30;
len[106] = 253.03;
len[107] = 250.78;
len[108] = 248.37;
len[109] = 245.87;
len[110] = 242.84;
len[111] = 239.80;
len[112] = 236.82;
len[113] = 233.93;
len[114] = 231.14;
len[115] = 228.41;
len[116] = 225.77;
len[117] = 223.23;
len[118] = 220.78;
len[119] = 218.33;
len[120] = 216.04;
len[121] = 213.82;
len[122] = 211.73;
len[123] = 209.82;
len[124] = 208.29;
len[125] = 207.02;
len[126] = 205.81;
len[127] = 205.31;
len[128] = 205.40;
len[129] = 207.31;
len[130] = 211.17;
len[131] = 209.85;
len[132] = 209.06;
len[133] = 208.55;
len[134] = 208.47;
len[135] = 209.16;
len[136] = 202.56;
len[137] = 196.84;
len[138] = 190.96;
len[139] = 184.95;
len[140] = 178.99;
len[141] = 173.10;
len[142] = 167.35;
len[143] = 164.35;
len[144] = 161.76;
len[145] = 159.59;
len[146] = 158.03;
len[147] = 158.50;
len[148] = 159.31;
len[149] = 155.91;
len[150] = 151.25;
len[151] = 148.59;
len[152] = 148.24;
len[153] = 148.80;
len[154] = 149.56;
len[155] = 150.42;
len[156] = 145.89;
len[157] = 143.07;
len[158] = 144.66;
len[159] = 146.35;
len[160] = 147.73;
len[161] = 148.91;
len[162] = 149.55;
len[163] = 150.32;
len[164] = 151.06;
len[165] = 151.56;
len[166] = 151.92;
len[167] = 152.29;
len[168] = 152.80;
len[169] = 153.31;
len[170] = 154.34;
len[171] = 156.24;
len[172] = 158.48;
len[173] = 162.15;
len[174] = 165.61;
len[175] = 166.41;
len[176] = 159.12;
len[177] = 151.37;
len[178] = 148.50;
len[179] = 145.64;
len[180] = 143.24;
len[181] = 140.91;
len[182] = 138.71;
len[183] = 136.81;
len[184] = 135.43;
len[185] = 134.54;
len[186] = 135.47;
len[187] = 136.67;
len[188] = 137.61;
len[189] = 137.68;
len[190] = 121.33;
len[191] = 106.94;
len[192] = 94.91;
len[193] = 76.20;
len[194] = 61.38;
len[195] = 62.10;
len[196] = 62.47;
len[197] = 62.83;
len[198] = 63.07;
len[199] = 63.27;
bmush[0] = 48;
bmc++;
bmush[1] = 56;
bmc++;
bmush[2] = 102;
bmc++;
bmush[3] = 112;
bmc++;
bmush[4] = 120;
bmc++;
bmush[5] = 146;
bmc++;
bmush[6] = 171;
bmc++;
bmush[7] = 185;
bmc++;
bmush[8] = 75;
bmc++;
bmush[9] = 90;
bmc++;
bmush[10] = 97;
bmc++;
bmush[11] = 51;
bmc++;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///scale and spawning
for(i = 0; i &lt; slices; i++){
    len[i] *= scale;
}

if edit == 0{
    var rand = 0, dir = 0;
    for(i = 1; i &lt; slices-1; i++){
        rand = random(10);
        dir = 360/slices*i-180;
        if rand &gt; 8{
            with (instance_create(x + lengthdir_x(len[i]+3*scale, 360/slices*i), y + lengthdir_y(len[i]+3*scale, 360/slices*i), o_mush)){
                d = dir - 45 + random(90) - 180;
                down = dir;
            }
        }
    }
    
    for(i = 0; i &lt; 12; i++){
        if bmush[i] != -1{
            dir = 360/slices*bmush[i]-180;
            with (instance_create(x + lengthdir_x(len[bmush[i]], 360/slices*bmush[i]), y + lengthdir_y(len[bmush[i]], 360/slices*bmush[i]), o_boost2)){
                d = dir + 90 - 180;
                down = dir;
            }
        }
    }
    
    instance_create(x + len[slices - 1] + 100, y, o_apple);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fixture
if edit == 0{
    for(i = 0; i &lt; slices; i++){
        fixture[i] = physics_fixture_create();
        physics_fixture_set_polygon_shape(fixture[i]);
        
        physics_fixture_add_point(fixture[i], 0,0);
        physics_fixture_add_point(fixture[i], lengthdir_x(len[wrap(i+1, 0, slices-1)], 360/slices*(wrap(i+1, 0, slices-1))), lengthdir_y(len[wrap(i+1, 0, slices-1)], 360/slices*(wrap(i+1, 0, slices-1))));
        physics_fixture_add_point(fixture[i], lengthdir_x(len[i], 360/slices*i), lengthdir_y(len[i], 360/slices*i));
        
        physics_fixture_bind_ext(fixture[i], self, 0, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if edit == 1{
    ei = floor(point_direction(x, y, mouse_x, mouse_y)/(360/slices));
    
    //brush radius
    for (bi = 0; bi &lt; br; bi++){
        //rise
        if mouse_check_button(mb_left){
            len[wrap(ei + bi, 0, slices-1)] += 1/(1+(bi/br));
            if bi &gt; 0{len[wrap(ei - bi, 0, slices-1)] += 1/(1+(bi/br));}
        }
        //sink
        if mouse_check_button(mb_right){
            len[wrap(ei + bi, 0, slices-1)] -= 1/(1+(bi/br));
            if bi &gt; 0{len[wrap(ei - bi, 0, slices-1)] -= 1/(1+(bi/br));}
        }
        //smooth
        if keyboard_check(vk_shift){
            len[wrap(ei + bi, 0, slices-1)] = (len[wrap(ei + bi, 0, slices-1)] + len[wrap(ei + bi + 1, 0, slices-1)] + len[wrap(ei + bi - 1, 0, slices-1)])/3*(-(bi-br)/br) + len[wrap(ei + bi, 0, slices-1)]*(bi/br);
            if bi &gt; 0{len[wrap(ei - bi, 0, slices-1)] = (len[wrap(ei - bi, 0, slices-1)] + len[wrap(ei - bi + 1, 0, slices-1)] + len[wrap(ei - bi - 1, 0, slices-1)])/3*(-(bi-br)/br) + len[wrap(ei - bi, 0, slices-1)]*(bi/br);}
        }
        
        //add mush
        if keyboard_check_pressed(vk_space){
            bmush[bmc] = ei;
            bmc++;
        }
    }
    
    //brush radius change
    if mouse_wheel_up(){br++;}
    if mouse_wheel_down(){br--;}
    br = clamp(br, 1, 50);
    
    if keyboard_check_pressed(vk_enter){
        var str = "";
        {
            for(i = 0; i &lt; slices; i++){
                str += "len[" + string(i) + "] = " + string(len[i]) + ";
"
            }
            
            for(i = 0; i &lt; 12; i++){
                if bmush[i] != -1{str += "bmush[" + string(i) + "] = " + string(bmush[i]) + ";
bmc++;
";}
            }
            clipboard_set_text(str);
        }
    }
}

if keyboard_check_pressed(vk_left){ding--;}
if keyboard_check_pressed(vk_right){ding++;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var lvls = 6, planew = 3, slope, go = 0;
for(i = 0; i &lt; slices; i++){
    if edit == 0{
        if point_direction(x, y, xavg, yavg) &gt; 360/slices*(i-4) &amp;&amp; point_direction(x, y, xavg, yavg) &lt; 360/slices*(i+4){go = 1;}
        if point_distance(x, y, xavg, yavg) &lt; 1600 &amp;&amp; (i &lt; 15 || i &gt; slices-15){go = 1;}
    }else{go = 1;}
    if go == 1{
        draw_set_color(make_color_rgb(214, 177, 127));
        shader_set(sh_sediment);
        draw_triangle(x, y, x + lengthdir_x(len[i]+planew*scale, 360/slices*i), y + lengthdir_y(len[i]+planew*scale, 360/slices*i), x + lengthdir_x(len[wrap(i+1, 0, slices-1)]+planew*scale, 360/slices*(wrap(i+1, 0, slices-1))), y + lengthdir_y(len[wrap(i+1, 0, slices-1)]+planew*scale, 360/slices*(wrap(i+1, 0, slices-1))), 0);
        shader_reset();
            surface_set_target(o_stuff.outlinesurf);
            draw_triangle(x - o_stuff.sx, y - o_stuff.sy, x + lengthdir_x(len[i]+planew*scale, 360/slices*i) - o_stuff.sx, y + lengthdir_y(len[i]+planew*scale, 360/slices*i) - o_stuff.sy, x + lengthdir_x(len[wrap(i+1, 0, slices-1)]+planew*scale, 360/slices*(wrap(i+1, 0, slices-1))) - o_stuff.sx, y + lengthdir_y(len[wrap(i+1, 0, slices-1)]+planew*scale, 360/slices*(wrap(i+1, 0, slices-1))) - o_stuff.sy, 0);
            surface_reset_target();
        if edit == 1{viewangle = 0;}
        slope = abs(-viewangle - point_direction(x + lengthdir_x(len[i], 360/slices*i), y + lengthdir_y(len[i], 360/slices*i), x + lengthdir_x(len[(wrap(i+1, 0, slices-1))], 360/slices*(wrap(i+1, 0, slices-1))), y + lengthdir_y(len[(wrap(i+1, 0, slices-1))], 360/slices*(wrap(i+1, 0, slices-1)))));
        draw_set_color(make_color_rgb(clamp(0 + slope, 0, 255), clamp(0 + slope/2.5, 0, 255), clamp(0 + slope/10, 0, 255)));
        draw_triangle(x + lengthdir_x(len[i]-planew*scale, 360/slices*i), y + lengthdir_y(len[i]-planew*scale, 360/slices*i), x + lengthdir_x(len[i]+planew*scale, 360/slices*i), y + lengthdir_y(len[i]+planew*scale, 360/slices*i), x + lengthdir_x(len[wrap(i+1, 0, slices-1)]+planew*scale, 360/slices*(wrap(i+1, 0, slices-1))), y + lengthdir_y(len[wrap(i+1, 0, slices-1)]+planew*scale, 360/slices*(wrap(i+1, 0, slices-1))), 0);
        draw_triangle(x + lengthdir_x(len[i]-planew*scale, 360/slices*i), y + lengthdir_y(len[i]-planew*scale, 360/slices*i), x + lengthdir_x(len[wrap(i+1, 0, slices-1)]-planew*scale, 360/slices*(wrap(i+1, 0, slices-1))), y + lengthdir_y(len[wrap(i+1, 0, slices-1)]-planew*scale, 360/slices*(wrap(i+1, 0, slices-1))), x + lengthdir_x(len[wrap(i+1, 0, slices-1)]+planew*scale, 360/slices*(wrap(i+1, 0, slices-1))), y + lengthdir_y(len[wrap(i+1, 0, slices-1)]+planew*scale, 360/slices*(wrap(i+1, 0, slices-1))), 0);
        //draw_set_color(make_color_rgb(0,255,255));
        for(ii = 0; ii &lt; lvls + 1; ii++){
            draw_set_color(make_color_rgb(255 - (sin(ii/2 + current_time/10000) +1)/2*155, 255 - (sin(ii/2 + 2 + current_time/10000)+1)/2*155, 255 - (sin(ii/2 + 3 + current_time/10000)+1)/2*155));//255/(lvls+1) * ii
            draw_line_width(x + lengthdir_x(len[i]-planew*scale + planew*scale*2/lvls*ii, 360/slices*i), y + lengthdir_y(len[i]-planew*scale + planew*scale*2/lvls*ii, 360/slices*i), x + lengthdir_x(len[(wrap(i+1, 0, slices-1))]-planew*scale + planew*scale*2/lvls*ii, 360/slices*(wrap(i+1, 0, slices-1))), y + lengthdir_y(len[(wrap(i+1, 0, slices-1))]-planew*scale + planew*scale*2/lvls*ii, 360/slices*(wrap(i+1, 0, slices-1))), 2);
        }
        //draw_triangle(x, y, x + lengthdir_x(len[i], 360/slices*i), y + lengthdir_y(len[i], 360/slices*i), x + lengthdir_x(len[wrap(i+1, 0, slices-1)], 360/slices*(wrap(i+1, 0, slices-1))), y + lengthdir_y(len[wrap(i+1, 0, slices-1)], 360/slices*(wrap(i+1, 0, slices-1))), 1);
    }
}
draw_set_color(c_white);

//editing
//draw_text(10, 10, string(ei));
//draw_text(10, 30, string(ding) + "/" + string(wrap(ding, 3, 6)));
if edit == 1{
for (i = 0; i &lt; 12; i++){
    if bmush[i] != -1{draw_circle(x + lengthdir_x(len[bmush[i]], 360/slices*bmush[i]), y + lengthdir_y(len[bmush[i]], 360/slices*bmush[i]), 5, 0);}
}
for(bi = 0; bi &lt; br; bi++){
draw_line(x, y, x + lengthdir_x(len[wrap(ei + bi, 0, slices-1)], 360/slices*wrap(ei + bi, 0, slices-1)), y + lengthdir_y(len[wrap(ei + bi, 0, slices-1)], 360/slices*wrap(ei + bi, 0, slices-1)));
if bi &gt; 0{draw_line(x, y, x + lengthdir_x(len[wrap(ei - bi, 0, slices-1)], 360/slices*wrap(ei - bi, 0, slices-1)), y + lengthdir_y(len[wrap(ei - bi, 0, slices-1)], 360/slices*wrap(ei - bi, 0, slices-1)));}
}
}

//physics_world_draw_debug(phy_debug_render_shapes);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
